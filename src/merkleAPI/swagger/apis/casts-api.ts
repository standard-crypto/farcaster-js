/* tslint:disable */
/* eslint-disable */
/**
 * Merkle API
 * API documentation for all publicly exposed APIs provided by Merkle Manufactory, Inc for Farcaster V2.
 *
 * OpenAPI spec version: 2.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
import { InlineResponse20015 } from "../models";
import { InlineResponse2004 } from "../models";
import { InlineResponse2006 } from "../models";
import { InlineResponse2007 } from "../models";
import { InlineResponse2008 } from "../models";
import { InlineResponse2009 } from "../models";
import { InlineResponse201 } from "../models";
import { V2CastReactionsBody } from "../models";
import { V2CastReactionsBody1 } from "../models";
import { V2CastsBody } from "../models";
import { V2CastsBody1 } from "../models";
import { V2RecastsBody } from "../models";
import { V2RecastsBody1 } from "../models";
/**
 * CastsApi - axios parameter creator
 * @export
 */
export const CastsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Remove a reaction from a cast.
     * @param {string} authorization
     * @param {V2CastReactionsBody1} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2CastReactionsDelete: async (
      authorization: string,
      body?: V2CastReactionsBody1,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authorization' is not null or undefined
      if (authorization === null || authorization === undefined) {
        throw new RequiredError(
          "authorization",
          "Required parameter authorization was null or undefined when calling v2CastReactionsDelete."
        );
      }
      const localVarPath = `/v2/cast-reactions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter["authorization"] = String(authorization);
      }

      localVarHeaderParameter["Content-Type"] = "*/*";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers!["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Get all reactions to a cast.
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2CastReactionsGet: async (
      limit: number,
      authorization: string,
      cursor?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'limit' is not null or undefined
      if (limit === null || limit === undefined) {
        throw new RequiredError(
          "limit",
          "Required parameter limit was null or undefined when calling v2CastReactionsGet."
        );
      }
      // verify required parameter 'authorization' is not null or undefined
      if (authorization === null || authorization === undefined) {
        throw new RequiredError(
          "authorization",
          "Required parameter authorization was null or undefined when calling v2CastReactionsGet."
        );
      }
      const localVarPath = `/v2/cast-reactions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (cursor !== undefined) {
        localVarQueryParameter["cursor"] = cursor;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter["authorization"] = String(authorization);
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Create a reaction to a cast.
     * @param {string} authorization
     * @param {V2CastReactionsBody} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2CastReactionsPut: async (
      authorization: string,
      body?: V2CastReactionsBody,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authorization' is not null or undefined
      if (authorization === null || authorization === undefined) {
        throw new RequiredError(
          "authorization",
          "Required parameter authorization was null or undefined when calling v2CastReactionsPut."
        );
      }
      const localVarPath = `/v2/cast-reactions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter["authorization"] = String(authorization);
      }

      localVarHeaderParameter["Content-Type"] = "*/*";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers!["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Get all users who recasted a cast.
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2CastRecastersGet: async (
      limit: number,
      authorization: string,
      cursor?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'limit' is not null or undefined
      if (limit === null || limit === undefined) {
        throw new RequiredError(
          "limit",
          "Required parameter limit was null or undefined when calling v2CastRecastersGet."
        );
      }
      // verify required parameter 'authorization' is not null or undefined
      if (authorization === null || authorization === undefined) {
        throw new RequiredError(
          "authorization",
          "Required parameter authorization was null or undefined when calling v2CastRecastersGet."
        );
      }
      const localVarPath = `/v2/cast-recasters`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (cursor !== undefined) {
        localVarQueryParameter["cursor"] = cursor;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter["authorization"] = String(authorization);
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes a cast.
     * @param {string} authorization
     * @param {V2CastsBody1} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2CastsDelete: async (
      authorization: string,
      body?: V2CastsBody1,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authorization' is not null or undefined
      if (authorization === null || authorization === undefined) {
        throw new RequiredError(
          "authorization",
          "Required parameter authorization was null or undefined when calling v2CastsDelete."
        );
      }
      const localVarPath = `/v2/casts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter["authorization"] = String(authorization);
      }

      localVarHeaderParameter["Content-Type"] = "*/*";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers!["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Gets all casts created by the specified user.
     * @param {boolean} includeDeletedCasts
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2CastsGet: async (
      includeDeletedCasts: boolean,
      limit: number,
      authorization: string,
      fid: number,
      cursor?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'includeDeletedCasts' is not null or undefined
      if (includeDeletedCasts === null || includeDeletedCasts === undefined) {
        throw new RequiredError(
          "includeDeletedCasts",
          "Required parameter includeDeletedCasts was null or undefined when calling v2CastsGet."
        );
      }
      // verify required parameter 'limit' is not null or undefined
      if (limit === null || limit === undefined) {
        throw new RequiredError(
          "limit",
          "Required parameter limit was null or undefined when calling v2CastsGet."
        );
      }
      // verify required parameter 'authorization' is not null or undefined
      if (authorization === null || authorization === undefined) {
        throw new RequiredError(
          "authorization",
          "Required parameter authorization was null or undefined when calling v2CastsGet."
        );
      }
      // verify required parameter 'fid' is not null or undefined
      if (fid === null || fid === undefined) {
        throw new RequiredError(
          "fid",
          "Required parameter fid was null or undefined when calling v2CastsGet."
        );
      }
      const localVarPath = `/v2/casts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (includeDeletedCasts !== undefined) {
        localVarQueryParameter["includeDeletedCasts"] = includeDeletedCasts;
      }

      if (cursor !== undefined) {
        localVarQueryParameter["cursor"] = cursor;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (fid !== undefined) {
        localVarQueryParameter["fid"] = fid;
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter["authorization"] = String(authorization);
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Creates a cast for the currently authenticated user.
     * @param {string} authorization
     * @param {V2CastsBody} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2CastsPost: async (
      authorization: string,
      body?: V2CastsBody,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authorization' is not null or undefined
      if (authorization === null || authorization === undefined) {
        throw new RequiredError(
          "authorization",
          "Required parameter authorization was null or undefined when calling v2CastsPost."
        );
      }
      const localVarPath = `/v2/casts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter["authorization"] = String(authorization);
      }

      localVarHeaderParameter["Content-Type"] = "*/*";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers!["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete a recast.
     * @param {string} authorization
     * @param {V2RecastsBody1} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2RecastsDelete: async (
      authorization: string,
      body?: V2RecastsBody1,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authorization' is not null or undefined
      if (authorization === null || authorization === undefined) {
        throw new RequiredError(
          "authorization",
          "Required parameter authorization was null or undefined when calling v2RecastsDelete."
        );
      }
      const localVarPath = `/v2/recasts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter["authorization"] = String(authorization);
      }

      localVarHeaderParameter["Content-Type"] = "*/*";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers!["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Recast a cast.
     * @param {string} authorization
     * @param {V2RecastsBody} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2RecastsPut: async (
      authorization: string,
      body?: V2RecastsBody,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authorization' is not null or undefined
      if (authorization === null || authorization === undefined) {
        throw new RequiredError(
          "authorization",
          "Required parameter authorization was null or undefined when calling v2RecastsPut."
        );
      }
      const localVarPath = `/v2/recasts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter["authorization"] = String(authorization);
      }

      localVarHeaderParameter["Content-Type"] = "*/*";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers!["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CastsApi - functional programming interface
 * @export
 */
export const CastsApiFp = function (configuration?: Configuration) {
  return {
    /**
     * Remove a reaction from a cast.
     * @param {string} authorization
     * @param {V2CastReactionsBody1} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CastReactionsDelete(
      authorization: string,
      body?: V2CastReactionsBody1,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<InlineResponse2004>>
    > {
      const localVarAxiosArgs = await CastsApiAxiosParamCreator(
        configuration
      ).v2CastReactionsDelete(authorization, body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Get all reactions to a cast.
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CastReactionsGet(
      limit: number,
      authorization: string,
      cursor?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<InlineResponse2007>>
    > {
      const localVarAxiosArgs = await CastsApiAxiosParamCreator(
        configuration
      ).v2CastReactionsGet(limit, authorization, cursor, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Create a reaction to a cast.
     * @param {string} authorization
     * @param {V2CastReactionsBody} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CastReactionsPut(
      authorization: string,
      body?: V2CastReactionsBody,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<InlineResponse2008>>
    > {
      const localVarAxiosArgs = await CastsApiAxiosParamCreator(
        configuration
      ).v2CastReactionsPut(authorization, body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Get all users who recasted a cast.
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CastRecastersGet(
      limit: number,
      authorization: string,
      cursor?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<InlineResponse2009>>
    > {
      const localVarAxiosArgs = await CastsApiAxiosParamCreator(
        configuration
      ).v2CastRecastersGet(limit, authorization, cursor, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Deletes a cast.
     * @param {string} authorization
     * @param {V2CastsBody1} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CastsDelete(
      authorization: string,
      body?: V2CastsBody1,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<InlineResponse2004>>
    > {
      const localVarAxiosArgs = await CastsApiAxiosParamCreator(
        configuration
      ).v2CastsDelete(authorization, body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Gets all casts created by the specified user.
     * @param {boolean} includeDeletedCasts
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CastsGet(
      includeDeletedCasts: boolean,
      limit: number,
      authorization: string,
      fid: number,
      cursor?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<InlineResponse2006>>
    > {
      const localVarAxiosArgs = await CastsApiAxiosParamCreator(
        configuration
      ).v2CastsGet(
        includeDeletedCasts,
        limit,
        authorization,
        fid,
        cursor,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Creates a cast for the currently authenticated user.
     * @param {string} authorization
     * @param {V2CastsBody} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CastsPost(
      authorization: string,
      body?: V2CastsBody,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<InlineResponse201>>
    > {
      const localVarAxiosArgs = await CastsApiAxiosParamCreator(
        configuration
      ).v2CastsPost(authorization, body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Delete a recast.
     * @param {string} authorization
     * @param {V2RecastsBody1} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2RecastsDelete(
      authorization: string,
      body?: V2RecastsBody1,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<InlineResponse2004>>
    > {
      const localVarAxiosArgs = await CastsApiAxiosParamCreator(
        configuration
      ).v2RecastsDelete(authorization, body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Recast a cast.
     * @param {string} authorization
     * @param {V2RecastsBody} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2RecastsPut(
      authorization: string,
      body?: V2RecastsBody,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<InlineResponse20015>>
    > {
      const localVarAxiosArgs = await CastsApiAxiosParamCreator(
        configuration
      ).v2RecastsPut(authorization, body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * CastsApi - factory interface
 * @export
 */
export const CastsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * Remove a reaction from a cast.
     * @param {string} authorization
     * @param {V2CastReactionsBody1} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CastReactionsDelete(
      authorization: string,
      body?: V2CastReactionsBody1,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<InlineResponse2004>> {
      return CastsApiFp(configuration)
        .v2CastReactionsDelete(authorization, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get all reactions to a cast.
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CastReactionsGet(
      limit: number,
      authorization: string,
      cursor?: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<InlineResponse2007>> {
      return CastsApiFp(configuration)
        .v2CastReactionsGet(limit, authorization, cursor, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Create a reaction to a cast.
     * @param {string} authorization
     * @param {V2CastReactionsBody} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CastReactionsPut(
      authorization: string,
      body?: V2CastReactionsBody,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<InlineResponse2008>> {
      return CastsApiFp(configuration)
        .v2CastReactionsPut(authorization, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get all users who recasted a cast.
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CastRecastersGet(
      limit: number,
      authorization: string,
      cursor?: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<InlineResponse2009>> {
      return CastsApiFp(configuration)
        .v2CastRecastersGet(limit, authorization, cursor, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes a cast.
     * @param {string} authorization
     * @param {V2CastsBody1} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CastsDelete(
      authorization: string,
      body?: V2CastsBody1,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<InlineResponse2004>> {
      return CastsApiFp(configuration)
        .v2CastsDelete(authorization, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Gets all casts created by the specified user.
     * @param {boolean} includeDeletedCasts
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CastsGet(
      fid: number,
      includeDeletedCasts: boolean,
      limit: number,
      authorization: string,
      cursor?: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<InlineResponse2006>> {
      return CastsApiFp(configuration)
        .v2CastsGet(
          includeDeletedCasts,
          limit,
          authorization,
          fid,
          cursor,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Creates a cast for the currently authenticated user.
     * @param {string} authorization
     * @param {V2CastsBody} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CastsPost(
      authorization: string,
      body?: V2CastsBody,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<InlineResponse201>> {
      return CastsApiFp(configuration)
        .v2CastsPost(authorization, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Delete a recast.
     * @param {string} authorization
     * @param {V2RecastsBody1} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2RecastsDelete(
      authorization: string,
      body?: V2RecastsBody1,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<InlineResponse2004>> {
      return CastsApiFp(configuration)
        .v2RecastsDelete(authorization, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Recast a cast.
     * @param {string} authorization
     * @param {V2RecastsBody} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2RecastsPut(
      authorization: string,
      body?: V2RecastsBody,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<InlineResponse20015>> {
      return CastsApiFp(configuration)
        .v2RecastsPut(authorization, body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CastsApi - object-oriented interface
 * @export
 * @class CastsApi
 * @extends {BaseAPI}
 */
export class CastsApi extends BaseAPI {
  /**
   * Remove a reaction from a cast.
   * @param {string} authorization
   * @param {V2CastReactionsBody1} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CastsApi
   */
  public async v2CastReactionsDelete(
    authorization: string,
    body?: V2CastReactionsBody1,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<InlineResponse2004>> {
    return CastsApiFp(this.configuration)
      .v2CastReactionsDelete(authorization, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Get all reactions to a cast.
   * @param {number} limit
   * @param {string} authorization
   * @param {string} [cursor]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CastsApi
   */
  public async v2CastReactionsGet(
    limit: number,
    authorization: string,
    cursor?: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<InlineResponse2007>> {
    return CastsApiFp(this.configuration)
      .v2CastReactionsGet(limit, authorization, cursor, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Create a reaction to a cast.
   * @param {string} authorization
   * @param {V2CastReactionsBody} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CastsApi
   */
  public async v2CastReactionsPut(
    authorization: string,
    body?: V2CastReactionsBody,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<InlineResponse2008>> {
    return CastsApiFp(this.configuration)
      .v2CastReactionsPut(authorization, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Get all users who recasted a cast.
   * @param {number} limit
   * @param {string} authorization
   * @param {string} [cursor]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CastsApi
   */
  public async v2CastRecastersGet(
    limit: number,
    authorization: string,
    cursor?: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<InlineResponse2009>> {
    return CastsApiFp(this.configuration)
      .v2CastRecastersGet(limit, authorization, cursor, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Deletes a cast.
   * @param {string} authorization
   * @param {V2CastsBody1} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CastsApi
   */
  public async v2CastsDelete(
    authorization: string,
    body?: V2CastsBody1,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<InlineResponse2004>> {
    return CastsApiFp(this.configuration)
      .v2CastsDelete(authorization, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Gets all casts created by the specified user.
   * @param {boolean} includeDeletedCasts
   * @param {number} limit
   * @param {string} authorization
   * @param {string} [cursor]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CastsApi
   */
  public async v2CastsGet(
    fid: number,
    includeDeletedCasts: boolean,
    limit: number,
    authorization: string,
    cursor?: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<InlineResponse2006>> {
    return CastsApiFp(this.configuration)
      .v2CastsGet(
        includeDeletedCasts,
        limit,
        authorization,
        fid,
        cursor,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Creates a cast for the currently authenticated user.
   * @param {string} authorization
   * @param {V2CastsBody} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CastsApi
   */
  public async v2CastsPost(
    authorization: string,
    body?: V2CastsBody,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<InlineResponse201>> {
    return CastsApiFp(this.configuration)
      .v2CastsPost(authorization, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Delete a recast.
   * @param {string} authorization
   * @param {V2RecastsBody1} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CastsApi
   */
  public async v2RecastsDelete(
    authorization: string,
    body?: V2RecastsBody1,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<InlineResponse2004>> {
    return CastsApiFp(this.configuration)
      .v2RecastsDelete(authorization, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Recast a cast.
   * @param {string} authorization
   * @param {V2RecastsBody} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CastsApi
   */
  public async v2RecastsPut(
    authorization: string,
    body?: V2RecastsBody,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<InlineResponse20015>> {
    return CastsApiFp(this.configuration)
      .v2RecastsPut(authorization, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
