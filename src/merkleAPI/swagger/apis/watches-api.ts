/* tslint:disable */
/* eslint-disable */
/**
 * Merkle API
 * API documentation for all publicly exposed APIs provided by Merkle Manufactory, Inc for Farcaster V2.
 *
 * OpenAPI spec version: 2.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
import { InlineResponse2004 } from "../models";
import { V2WatchedcastsBody } from "../models";
import { V2WatchedcastsBody1 } from "../models";
/**
 * WatchesApi - axios parameter creator
 * @export
 */
export const WatchesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Unwatch a cast.
     * @param {string} authorization
     * @param {V2WatchedcastsBody1} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2WatchedCastsDelete: async (
      authorization: string,
      body?: V2WatchedcastsBody1,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authorization' is not null or undefined
      if (authorization === null || authorization === undefined) {
        throw new RequiredError(
          "authorization",
          "Required parameter authorization was null or undefined when calling v2WatchedCastsDelete."
        );
      }
      const localVarPath = `/v2/watched-casts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter["authorization"] = String(authorization);
      }

      localVarHeaderParameter["Content-Type"] = "*/*";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers!["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Watch a cast.
     * @param {string} authorization
     * @param {V2WatchedcastsBody} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2WatchedCastsPut: async (
      authorization: string,
      body?: V2WatchedcastsBody,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authorization' is not null or undefined
      if (authorization === null || authorization === undefined) {
        throw new RequiredError(
          "authorization",
          "Required parameter authorization was null or undefined when calling v2WatchedCastsPut."
        );
      }
      const localVarPath = `/v2/watched-casts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter["authorization"] = String(authorization);
      }

      localVarHeaderParameter["Content-Type"] = "*/*";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers!["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * WatchesApi - functional programming interface
 * @export
 */
export const WatchesApiFp = function (configuration?: Configuration) {
  return {
    /**
     * Unwatch a cast.
     * @param {string} authorization
     * @param {V2WatchedcastsBody1} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2WatchedCastsDelete(
      authorization: string,
      body?: V2WatchedcastsBody1,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<InlineResponse2004>>
    > {
      const localVarAxiosArgs = await WatchesApiAxiosParamCreator(
        configuration
      ).v2WatchedCastsDelete(authorization, body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Watch a cast.
     * @param {string} authorization
     * @param {V2WatchedcastsBody} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2WatchedCastsPut(
      authorization: string,
      body?: V2WatchedcastsBody,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<InlineResponse2004>>
    > {
      const localVarAxiosArgs = await WatchesApiAxiosParamCreator(
        configuration
      ).v2WatchedCastsPut(authorization, body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * WatchesApi - factory interface
 * @export
 */
export const WatchesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * Unwatch a cast.
     * @param {string} authorization
     * @param {V2WatchedcastsBody1} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2WatchedCastsDelete(
      authorization: string,
      body?: V2WatchedcastsBody1,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<InlineResponse2004>> {
      return WatchesApiFp(configuration)
        .v2WatchedCastsDelete(authorization, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Watch a cast.
     * @param {string} authorization
     * @param {V2WatchedcastsBody} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2WatchedCastsPut(
      authorization: string,
      body?: V2WatchedcastsBody,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<InlineResponse2004>> {
      return WatchesApiFp(configuration)
        .v2WatchedCastsPut(authorization, body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * WatchesApi - object-oriented interface
 * @export
 * @class WatchesApi
 * @extends {BaseAPI}
 */
export class WatchesApi extends BaseAPI {
  /**
   * Unwatch a cast.
   * @param {string} authorization
   * @param {V2WatchedcastsBody1} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WatchesApi
   */
  public async v2WatchedCastsDelete(
    authorization: string,
    body?: V2WatchedcastsBody1,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<InlineResponse2004>> {
    return WatchesApiFp(this.configuration)
      .v2WatchedCastsDelete(authorization, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Watch a cast.
   * @param {string} authorization
   * @param {V2WatchedcastsBody} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WatchesApi
   */
  public async v2WatchedCastsPut(
    authorization: string,
    body?: V2WatchedcastsBody,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<InlineResponse2004>> {
    return WatchesApiFp(this.configuration)
      .v2WatchedCastsPut(authorization, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
