/* tslint:disable */
/* eslint-disable */
/**
 * Merkle API
 * API documentation for all publicly exposed APIs provided by Merkle Manufactory, Inc for Farcaster V2.
 *
 * OpenAPI spec version: 2.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
import { InlineResponse2001 } from "../models";
import { InlineResponse20010 } from "../models";
import { InlineResponse20011 } from "../models";
import { InlineResponse2002 } from "../models";
import { InlineResponse2005 } from "../models";
import { InlineResponse2009 } from "../models";
/**
 * AssetsApi - axios parameter creator
 * @export
 */
export const AssetsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Gets all asset-related events for the specified user.
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2AssetEventsGet: async (
      limit: number,
      authorization: string,
      cursor?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'limit' is not null or undefined
      if (limit === null || limit === undefined) {
        throw new RequiredError(
          "limit",
          "Required parameter limit was null or undefined when calling v2AssetEventsGet."
        );
      }
      // verify required parameter 'authorization' is not null or undefined
      if (authorization === null || authorization === undefined) {
        throw new RequiredError(
          "authorization",
          "Required parameter authorization was null or undefined when calling v2AssetEventsGet."
        );
      }
      const localVarPath = `/v2/asset-events`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (cursor !== undefined) {
        localVarQueryParameter["cursor"] = cursor;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter["authorization"] = String(authorization);
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Gets details about the specified asset.
     * @param {string} tokenId
     * @param {string} authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2AssetGet: async (
      tokenId: string,
      authorization: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'tokenId' is not null or undefined
      if (tokenId === null || tokenId === undefined) {
        throw new RequiredError(
          "tokenId",
          "Required parameter tokenId was null or undefined when calling v2AssetGet."
        );
      }
      // verify required parameter 'authorization' is not null or undefined
      if (authorization === null || authorization === undefined) {
        throw new RequiredError(
          "authorization",
          "Required parameter authorization was null or undefined when calling v2AssetGet."
        );
      }
      const localVarPath = `/v2/asset`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (tokenId !== undefined) {
        localVarQueryParameter["tokenId"] = tokenId;
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter["authorization"] = String(authorization);
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Get all asset events related to the given collection.
     * @param {string} collectionId
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2CollectionActivityGet: async (
      collectionId: string,
      limit: number,
      authorization: string,
      cursor?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'collectionId' is not null or undefined
      if (collectionId === null || collectionId === undefined) {
        throw new RequiredError(
          "collectionId",
          "Required parameter collectionId was null or undefined when calling v2CollectionActivityGet."
        );
      }
      // verify required parameter 'limit' is not null or undefined
      if (limit === null || limit === undefined) {
        throw new RequiredError(
          "limit",
          "Required parameter limit was null or undefined when calling v2CollectionActivityGet."
        );
      }
      // verify required parameter 'authorization' is not null or undefined
      if (authorization === null || authorization === undefined) {
        throw new RequiredError(
          "authorization",
          "Required parameter authorization was null or undefined when calling v2CollectionActivityGet."
        );
      }
      const localVarPath = `/v2/collection-activity`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (collectionId !== undefined) {
        localVarQueryParameter["collectionId"] = collectionId;
      }

      if (cursor !== undefined) {
        localVarQueryParameter["cursor"] = cursor;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter["authorization"] = String(authorization);
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Gets all assets owned by a given user for a specific collection.
     * @param {string} collectionId
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2CollectionAssetsGet: async (
      fid: number,
      collectionId: string,
      limit: number,
      authorization: string,
      cursor?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'fid' is not null or undefined
      if (fid === null || fid === undefined) {
        throw new RequiredError(
          "fid",
          "Required parameter fid was null or undefined when calling v2CollectionAssetsGet."
        );
      }
      // verify required parameter 'collectionId' is not null or undefined
      if (collectionId === null || collectionId === undefined) {
        throw new RequiredError(
          "collectionId",
          "Required parameter collectionId was null or undefined when calling v2CollectionAssetsGet."
        );
      }
      // verify required parameter 'limit' is not null or undefined
      if (limit === null || limit === undefined) {
        throw new RequiredError(
          "limit",
          "Required parameter limit was null or undefined when calling v2CollectionAssetsGet."
        );
      }
      // verify required parameter 'authorization' is not null or undefined
      if (authorization === null || authorization === undefined) {
        throw new RequiredError(
          "authorization",
          "Required parameter authorization was null or undefined when calling v2CollectionAssetsGet."
        );
      }
      const localVarPath = `/v2/collection-assets`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (fid !== undefined) {
        localVarQueryParameter["ownerFid"] = fid;
      }

      if (collectionId !== undefined) {
        localVarQueryParameter["collectionId"] = collectionId;
      }

      if (cursor !== undefined) {
        localVarQueryParameter["cursor"] = cursor;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter["authorization"] = String(authorization);
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Get details about a collection of assets.
     * @param {string} collectionId
     * @param {string} authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2CollectionGet: async (
      collectionId: string,
      authorization: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'collectionId' is not null or undefined
      if (collectionId === null || collectionId === undefined) {
        throw new RequiredError(
          "collectionId",
          "Required parameter collectionId was null or undefined when calling v2CollectionGet."
        );
      }
      // verify required parameter 'authorization' is not null or undefined
      if (authorization === null || authorization === undefined) {
        throw new RequiredError(
          "authorization",
          "Required parameter authorization was null or undefined when calling v2CollectionGet."
        );
      }
      const localVarPath = `/v2/collection`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (collectionId !== undefined) {
        localVarQueryParameter["collectionId"] = collectionId;
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter["authorization"] = String(authorization);
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Get all users who own at least one asset from the specified collection.
     * @param {string} collectionId
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2CollectionOwnersGet: async (
      collectionId: string,
      limit: number,
      authorization: string,
      cursor?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'collectionId' is not null or undefined
      if (collectionId === null || collectionId === undefined) {
        throw new RequiredError(
          "collectionId",
          "Required parameter collectionId was null or undefined when calling v2CollectionOwnersGet."
        );
      }
      // verify required parameter 'limit' is not null or undefined
      if (limit === null || limit === undefined) {
        throw new RequiredError(
          "limit",
          "Required parameter limit was null or undefined when calling v2CollectionOwnersGet."
        );
      }
      // verify required parameter 'authorization' is not null or undefined
      if (authorization === null || authorization === undefined) {
        throw new RequiredError(
          "authorization",
          "Required parameter authorization was null or undefined when calling v2CollectionOwnersGet."
        );
      }
      const localVarPath = `/v2/collection-owners`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (collectionId !== undefined) {
        localVarQueryParameter["collectionId"] = collectionId;
      }

      if (cursor !== undefined) {
        localVarQueryParameter["cursor"] = cursor;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter["authorization"] = String(authorization);
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Get all collections owned by the specified user.
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2UserCollectionsGet: async (
      fid: number,
      limit: number,
      authorization: string,
      cursor?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'fid' is not null or undefined
      if (fid === null || fid === undefined) {
        throw new RequiredError(
          "fid",
          "Required parameter fid was null or undefined when calling v2UserCollectionsGet."
        );
      }
      // verify required parameter 'limit' is not null or undefined
      if (limit === null || limit === undefined) {
        throw new RequiredError(
          "limit",
          "Required parameter limit was null or undefined when calling v2UserCollectionsGet."
        );
      }
      // verify required parameter 'authorization' is not null or undefined
      if (authorization === null || authorization === undefined) {
        throw new RequiredError(
          "authorization",
          "Required parameter authorization was null or undefined when calling v2UserCollectionsGet."
        );
      }
      const localVarPath = `/v2/user-collections`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (fid !== undefined) {
        localVarQueryParameter["ownerFid"] = fid;
      }

      if (cursor !== undefined) {
        localVarQueryParameter["cursor"] = cursor;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter["authorization"] = String(authorization);
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AssetsApi - functional programming interface
 * @export
 */
export const AssetsApiFp = function (configuration?: Configuration) {
  return {
    /**
     * Gets all asset-related events for the specified user.
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2AssetEventsGet(
      limit: number,
      authorization: string,
      cursor?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<InlineResponse2001>>
    > {
      const localVarAxiosArgs = await AssetsApiAxiosParamCreator(
        configuration
      ).v2AssetEventsGet(limit, authorization, cursor, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Gets details about the specified asset.
     * @param {string} tokenId
     * @param {string} authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2AssetGet(
      tokenId: string,
      authorization: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<InlineResponse2002>>
    > {
      const localVarAxiosArgs = await AssetsApiAxiosParamCreator(
        configuration
      ).v2AssetGet(tokenId, authorization, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Get all asset events related to the given collection.
     * @param {string} collectionId
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CollectionActivityGet(
      collectionId: string,
      limit: number,
      authorization: string,
      cursor?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<InlineResponse2001>>
    > {
      const localVarAxiosArgs = await AssetsApiAxiosParamCreator(
        configuration
      ).v2CollectionActivityGet(
        collectionId,
        limit,
        authorization,
        cursor,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Gets all assets owned by a given user for a specific collection.
     * @param {string} collectionId
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CollectionAssetsGet(
      fid: number,
      collectionId: string,
      limit: number,
      authorization: string,
      cursor?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<InlineResponse2005>>
    > {
      const localVarAxiosArgs = await AssetsApiAxiosParamCreator(
        configuration
      ).v2CollectionAssetsGet(
        fid,
        collectionId,
        limit,
        authorization,
        cursor,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Get details about a collection of assets.
     * @param {string} collectionId
     * @param {string} authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CollectionGet(
      collectionId: string,
      authorization: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<InlineResponse20010>>
    > {
      const localVarAxiosArgs = await AssetsApiAxiosParamCreator(
        configuration
      ).v2CollectionGet(collectionId, authorization, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Get all users who own at least one asset from the specified collection.
     * @param {string} collectionId
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CollectionOwnersGet(
      collectionId: string,
      limit: number,
      authorization: string,
      cursor?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<InlineResponse2009>>
    > {
      const localVarAxiosArgs = await AssetsApiAxiosParamCreator(
        configuration
      ).v2CollectionOwnersGet(
        collectionId,
        limit,
        authorization,
        cursor,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Get all collections owned by the specified user.
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2UserCollectionsGet(
      fid: number,
      limit: number,
      authorization: string,
      cursor?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<InlineResponse20011>>
    > {
      const localVarAxiosArgs = await AssetsApiAxiosParamCreator(
        configuration
      ).v2UserCollectionsGet(fid, limit, authorization, cursor, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * AssetsApi - factory interface
 * @export
 */
export const AssetsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * Gets all asset-related events for the specified user.
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2AssetEventsGet(
      limit: number,
      authorization: string,
      cursor?: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<InlineResponse2001>> {
      return AssetsApiFp(configuration)
        .v2AssetEventsGet(limit, authorization, cursor, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Gets details about the specified asset.
     * @param {string} tokenId
     * @param {string} authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2AssetGet(
      tokenId: string,
      authorization: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<InlineResponse2002>> {
      return AssetsApiFp(configuration)
        .v2AssetGet(tokenId, authorization, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get all asset events related to the given collection.
     * @param {string} collectionId
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CollectionActivityGet(
      collectionId: string,
      limit: number,
      authorization: string,
      cursor?: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<InlineResponse2001>> {
      return AssetsApiFp(configuration)
        .v2CollectionActivityGet(
          collectionId,
          limit,
          authorization,
          cursor,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Gets all assets owned by a given user for a specific collection.
     * @param {string} collectionId
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CollectionAssetsGet(
      fid: number,
      collectionId: string,
      limit: number,
      authorization: string,
      cursor?: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<InlineResponse2005>> {
      return AssetsApiFp(configuration)
        .v2CollectionAssetsGet(
          fid,
          collectionId,
          limit,
          authorization,
          cursor,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Get details about a collection of assets.
     * @param {string} collectionId
     * @param {string} authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CollectionGet(
      collectionId: string,
      authorization: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<InlineResponse20010>> {
      return AssetsApiFp(configuration)
        .v2CollectionGet(collectionId, authorization, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get all users who own at least one asset from the specified collection.
     * @param {string} collectionId
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CollectionOwnersGet(
      collectionId: string,
      limit: number,
      authorization: string,
      cursor?: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<InlineResponse2009>> {
      return AssetsApiFp(configuration)
        .v2CollectionOwnersGet(
          collectionId,
          limit,
          authorization,
          cursor,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Get all collections owned by the specified user.
     * @param {number} limit
     * @param {string} authorization
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2UserCollectionsGet(
      fid: number,
      limit: number,
      authorization: string,
      cursor?: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<InlineResponse20011>> {
      return AssetsApiFp(configuration)
        .v2UserCollectionsGet(fid, limit, authorization, cursor, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AssetsApi - object-oriented interface
 * @export
 * @class AssetsApi
 * @extends {BaseAPI}
 */
export class AssetsApi extends BaseAPI {
  /**
   * Gets all asset-related events for the specified user.
   * @param {number} limit
   * @param {string} authorization
   * @param {string} [cursor]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetsApi
   */
  public async v2AssetEventsGet(
    limit: number,
    authorization: string,
    cursor?: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<InlineResponse2001>> {
    return AssetsApiFp(this.configuration)
      .v2AssetEventsGet(limit, authorization, cursor, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Gets details about the specified asset.
   * @param {string} tokenId
   * @param {string} authorization
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetsApi
   */
  public async v2AssetGet(
    tokenId: string,
    authorization: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<InlineResponse2002>> {
    return AssetsApiFp(this.configuration)
      .v2AssetGet(tokenId, authorization, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Get all asset events related to the given collection.
   * @param {string} collectionId
   * @param {number} limit
   * @param {string} authorization
   * @param {string} [cursor]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetsApi
   */
  public async v2CollectionActivityGet(
    collectionId: string,
    limit: number,
    authorization: string,
    cursor?: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<InlineResponse2001>> {
    return AssetsApiFp(this.configuration)
      .v2CollectionActivityGet(
        collectionId,
        limit,
        authorization,
        cursor,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Gets all assets owned by a given user for a specific collection.
   * @param {string} collectionId
   * @param {number} limit
   * @param {string} authorization
   * @param {string} [cursor]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetsApi
   */
  public async v2CollectionAssetsGet(
    fid: number,
    collectionId: string,
    limit: number,
    authorization: string,
    cursor?: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<InlineResponse2005>> {
    return AssetsApiFp(this.configuration)
      .v2CollectionAssetsGet(
        fid,
        collectionId,
        limit,
        authorization,
        cursor,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Get details about a collection of assets.
   * @param {string} collectionId
   * @param {string} authorization
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetsApi
   */
  public async v2CollectionGet(
    collectionId: string,
    authorization: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<InlineResponse20010>> {
    return AssetsApiFp(this.configuration)
      .v2CollectionGet(collectionId, authorization, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Get all users who own at least one asset from the specified collection.
   * @param {string} collectionId
   * @param {number} limit
   * @param {string} authorization
   * @param {string} [cursor]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetsApi
   */
  public async v2CollectionOwnersGet(
    collectionId: string,
    limit: number,
    authorization: string,
    cursor?: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<InlineResponse2009>> {
    return AssetsApiFp(this.configuration)
      .v2CollectionOwnersGet(
        collectionId,
        limit,
        authorization,
        cursor,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Get all collections owned by the specified user.
   * @param {number} limit
   * @param {string} authorization
   * @param {string} [cursor]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetsApi
   */
  public async v2UserCollectionsGet(
    fid: number,
    limit: number,
    authorization: string,
    cursor?: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<InlineResponse20011>> {
    return AssetsApiFp(this.configuration)
      .v2UserCollectionsGet(fid, limit, authorization, cursor, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
