/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster Hub REST API
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. Some client libraries:   - [TypeScript](https://www.npmjs.com/package/@standard-crypto/farcaster-js-hub-rest) 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration.js';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common.js';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base.js';
// @ts-ignore
import { ErrorResponse } from '../models/index.js';
// @ts-ignore
import { ValidateMessageResponse } from '../models/index.js';
/**
 * ValidateMessageApi - axios parameter creator
 * @export
 */
export const ValidateMessageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Validate a signed protobuf-serialized message with the Hub
         * @param {Buffer} body *  A Message is a delta operation on the Farcaster network. The message protobuf is an envelope  that wraps a MessageData object and contains a hash and signature which can verify its authenticity.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateMessage: async (body: Buffer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('validateMessage', 'body', body)
            const localVarPath = `/v1/validateMessage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication usernamePassword required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ValidateMessageApi - functional programming interface
 * @export
 */
export const ValidateMessageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ValidateMessageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Validate a signed protobuf-serialized message with the Hub
         * @param {Buffer} body *  A Message is a delta operation on the Farcaster network. The message protobuf is an envelope  that wraps a MessageData object and contains a hash and signature which can verify its authenticity.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateMessage(body: Buffer, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidateMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateMessage(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ValidateMessageApi - factory interface
 * @export
 */
export const ValidateMessageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ValidateMessageApiFp(configuration)
    return {
        /**
         * 
         * @summary Validate a signed protobuf-serialized message with the Hub
         * @param {ValidateMessageApiValidateMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateMessage(requestParameters: ValidateMessageApiValidateMessageRequest, options?: AxiosRequestConfig): AxiosPromise<ValidateMessageResponse> {
            return localVarFp.validateMessage(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for validateMessage operation in ValidateMessageApi.
 * @export
 * @interface ValidateMessageApiValidateMessageRequest
 */
export interface ValidateMessageApiValidateMessageRequest {
    /**
     * *  A Message is a delta operation on the Farcaster network. The message protobuf is an envelope  that wraps a MessageData object and contains a hash and signature which can verify its authenticity.
     * @type {Buffer}
     * @memberof ValidateMessageApiValidateMessage
     */
    readonly body: Buffer
}

/**
 * ValidateMessageApi - object-oriented interface
 * @export
 * @class ValidateMessageApi
 * @extends {BaseAPI}
 */
export class ValidateMessageApi extends BaseAPI {
    /**
     * 
     * @summary Validate a signed protobuf-serialized message with the Hub
     * @param {ValidateMessageApiValidateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValidateMessageApi
     */
    public validateMessage(requestParameters: ValidateMessageApiValidateMessageRequest, options?: AxiosRequestConfig) {
        return ValidateMessageApiFp(this.configuration).validateMessage(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
