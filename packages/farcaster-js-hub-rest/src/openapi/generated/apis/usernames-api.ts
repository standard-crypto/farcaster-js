/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster Hub REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { UserNameProof } from '../models';
// @ts-ignore
import { UsernameProofsResponse } from '../models';
/**
 * UsernamesApi - axios parameter creator
 * @export
 */
export const UsernamesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get an proof for a username by the Farcaster username
         * @param {string} name The Farcaster username or ENS address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsernameProof: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getUsernameProof', 'name', name)
            const localVarPath = `/v1/userNameProofByName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of proofs provided by an FID
         * @param {number} fid The FID being requested
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsernameProofsByFid: async (fid: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('listUsernameProofsByFid', 'fid', fid)
            const localVarPath = `/v1/userNameProofsByFid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsernamesApi - functional programming interface
 * @export
 */
export const UsernamesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsernamesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get an proof for a username by the Farcaster username
         * @param {string} name The Farcaster username or ENS address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsernameProof(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserNameProof>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsernameProof(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of proofs provided by an FID
         * @param {number} fid The FID being requested
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsernameProofsByFid(fid: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsernameProofsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsernameProofsByFid(fid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsernamesApi - factory interface
 * @export
 */
export const UsernamesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsernamesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get an proof for a username by the Farcaster username
         * @param {UsernamesApiGetUsernameProofRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsernameProof(requestParameters: UsernamesApiGetUsernameProofRequest, options?: AxiosRequestConfig): AxiosPromise<UserNameProof> {
            return localVarFp.getUsernameProof(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of proofs provided by an FID
         * @param {UsernamesApiListUsernameProofsByFidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsernameProofsByFid(requestParameters: UsernamesApiListUsernameProofsByFidRequest, options?: AxiosRequestConfig): AxiosPromise<UsernameProofsResponse> {
            return localVarFp.listUsernameProofsByFid(requestParameters.fid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getUsernameProof operation in UsernamesApi.
 * @export
 * @interface UsernamesApiGetUsernameProofRequest
 */
export interface UsernamesApiGetUsernameProofRequest {
    /**
     * The Farcaster username or ENS address
     * @type {string}
     * @memberof UsernamesApiGetUsernameProof
     */
    readonly name: string
}

/**
 * Request parameters for listUsernameProofsByFid operation in UsernamesApi.
 * @export
 * @interface UsernamesApiListUsernameProofsByFidRequest
 */
export interface UsernamesApiListUsernameProofsByFidRequest {
    /**
     * The FID being requested
     * @type {number}
     * @memberof UsernamesApiListUsernameProofsByFid
     */
    readonly fid: number
}

/**
 * UsernamesApi - object-oriented interface
 * @export
 * @class UsernamesApi
 * @extends {BaseAPI}
 */
export class UsernamesApi extends BaseAPI {
    /**
     * 
     * @summary Get an proof for a username by the Farcaster username
     * @param {UsernamesApiGetUsernameProofRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsernamesApi
     */
    public getUsernameProof(requestParameters: UsernamesApiGetUsernameProofRequest, options?: AxiosRequestConfig) {
        return UsernamesApiFp(this.configuration).getUsernameProof(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of proofs provided by an FID
     * @param {UsernamesApiListUsernameProofsByFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsernamesApi
     */
    public listUsernameProofsByFid(requestParameters: UsernamesApiListUsernameProofsByFidRequest, options?: AxiosRequestConfig) {
        return UsernamesApiFp(this.configuration).listUsernameProofsByFid(requestParameters.fid, options).then((request) => request(this.axios, this.basePath));
    }
}
