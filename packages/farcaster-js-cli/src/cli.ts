/* eslint-disable eslint-comments/disable-enable-pair */
/* eslint-disable no-console */

import { Command } from 'commander';
import { NeynarAPIClient, waitForNeynarSignerApproval } from '@standard-crypto/farcaster-js-neynar';
import QRCode from 'qrcode';
import { createDeveloperSigner } from './keyGateWayClient.js';

const program = new Command();

const signerOptionsString = `
There are 2 options for creating a signer.

Developer Managed:
- A signer is generated by interacting with the KeyGateway Contract on Optimism (0x00000000fc56947c7e7183f8ca4b62398caadf0b).
- You must have a small amount of funds (~0.001) in your account's custody address on Optimism.
- You will need to provide the mnemonic for your account.
- This signer can be used anywhere (except with Neynar).

Neynar Managed:
- Neynar creates a signer using your developer mnemonic.
- Approval is done through the Warpcast App by any user.
- Payment is required in the app using Warps or a $0.99 in-app purchase.
- A Neynar API Key is necessary.
- This signer is exclusive to Neynar APIs.

Which type of signer will you be creating?
`;

async function createNeynarSigner(apiKey: string, developerMnemonic: string): Promise<void> {
  console.log('Creating a new Neynar signer...\n');
  const client = new NeynarAPIClient(apiKey);
  const signer = await client.v2.createSigner(developerMnemonic);
  const signerUuid: string = signer.signer_uuid;
  const approveUrl: string = signer.signer_approval_url ?? '';
  console.log(await QRCode.toString(approveUrl, { type: 'terminal', small: true }));
  console.log(`URL: ${approveUrl}`);
  console.log(`Signer UUID: ${signerUuid}\n`);
  console.log('Scan the QR code above or visit the URL on a logged in device to approve signer');
  console.log('\n-----------------------------------\n');
  console.log('Once approved, you can start using your signer with Neynar to write data to Farcaster');
  const ora = await import('ora');
  await ora.oraPromise(waitForNeynarSignerApproval(client, signerUuid), { spinner: 'bouncingBall' });
}

export async function runCli(): Promise<void> {
  program
    .version('1.0.2')
    .command('create-signer')
    .description('Farcaster-JS CLI')
    .action(async() => {
      try {
        const inquirer = await import('inquirer');
        const prompt = inquirer.createPromptModule();
        const signerType = await prompt({
          type: 'list',
          name: 'signerType',
          message: signerOptionsString,
          choices: ['developer', 'neynar'],
        });
        if (signerType.signerType === 'developer') {
          const mnemonic = await prompt({
            type: 'input',
            name: 'mnemonic',
            message: 'Enter your mnemonic:',
          });
          await createDeveloperSigner(mnemonic.mnemonic);
        } else {
          const apiKey = await prompt({
            type: 'input',
            name: 'apiKey',
            message: 'Enter your Neynar API Key:',
          });
          const developerMnemonic = await prompt({
            type: 'input',
            name: 'mnemonic',
            message: 'Enter the mnemonic for the developer:',
          });
          await createNeynarSigner(apiKey.apiKey, developerMnemonic.mnemonic);
        }
      } catch (error) {
        console.error('Error:', error);
      }
    });

  program.parse(process.argv);
}
