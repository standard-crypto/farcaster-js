/* tslint:disable */
/* eslint-disable */
/**
 * Warpcast API
 * Private API used by the Warpcast client
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration.js';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common.js';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base.js';
// @ts-ignore
import { V2DirectCastConversationDetailsGet200Response } from '../models/index.js';
// @ts-ignore
import { V2DirectCastConversationGet200Response } from '../models/index.js';
// @ts-ignore
import { V2DirectCastConversationListGet200Response } from '../models/index.js';
/**
 * DirectCastsApi - axios parameter creator
 * @export
 */
export const DirectCastsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} conversationId 
         * @param {string} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DirectCastConversationDetailsGet: async (conversationId: string, limit?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('v2DirectCastConversationDetailsGet', 'conversationId', conversationId)
            const localVarPath = `/v2/direct-cast-conversation-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (conversationId !== undefined) {
                localVarQueryParameter['conversationId'] = conversationId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DirectCastConversationGet: async (conversationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('v2DirectCastConversationGet', 'conversationId', conversationId)
            const localVarPath = `/v2/direct-cast-conversation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (conversationId !== undefined) {
                localVarQueryParameter['conversationId'] = conversationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DirectCastConversationListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/direct-cast-conversation-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DirectCastsApi - functional programming interface
 * @export
 */
export const DirectCastsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DirectCastsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} conversationId 
         * @param {string} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2DirectCastConversationDetailsGet(conversationId: string, limit?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2DirectCastConversationDetailsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2DirectCastConversationDetailsGet(conversationId, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2DirectCastConversationGet(conversationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2DirectCastConversationGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2DirectCastConversationGet(conversationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2DirectCastConversationListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2DirectCastConversationListGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2DirectCastConversationListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DirectCastsApi - factory interface
 * @export
 */
export const DirectCastsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DirectCastsApiFp(configuration)
    return {
        /**
         * 
         * @param {DirectCastsApiV2DirectCastConversationDetailsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DirectCastConversationDetailsGet(requestParameters: DirectCastsApiV2DirectCastConversationDetailsGetRequest, options?: AxiosRequestConfig): AxiosPromise<V2DirectCastConversationDetailsGet200Response> {
            return localVarFp.v2DirectCastConversationDetailsGet(requestParameters.conversationId, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DirectCastsApiV2DirectCastConversationGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DirectCastConversationGet(requestParameters: DirectCastsApiV2DirectCastConversationGetRequest, options?: AxiosRequestConfig): AxiosPromise<V2DirectCastConversationGet200Response> {
            return localVarFp.v2DirectCastConversationGet(requestParameters.conversationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DirectCastConversationListGet(options?: AxiosRequestConfig): AxiosPromise<V2DirectCastConversationListGet200Response> {
            return localVarFp.v2DirectCastConversationListGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v2DirectCastConversationDetailsGet operation in DirectCastsApi.
 * @export
 * @interface DirectCastsApiV2DirectCastConversationDetailsGetRequest
 */
export interface DirectCastsApiV2DirectCastConversationDetailsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DirectCastsApiV2DirectCastConversationDetailsGet
     */
    readonly conversationId: string

    /**
     * 
     * @type {string}
     * @memberof DirectCastsApiV2DirectCastConversationDetailsGet
     */
    readonly limit?: string
}

/**
 * Request parameters for v2DirectCastConversationGet operation in DirectCastsApi.
 * @export
 * @interface DirectCastsApiV2DirectCastConversationGetRequest
 */
export interface DirectCastsApiV2DirectCastConversationGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DirectCastsApiV2DirectCastConversationGet
     */
    readonly conversationId: string
}

/**
 * DirectCastsApi - object-oriented interface
 * @export
 * @class DirectCastsApi
 * @extends {BaseAPI}
 */
export class DirectCastsApi extends BaseAPI {
    /**
     * 
     * @param {DirectCastsApiV2DirectCastConversationDetailsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectCastsApi
     */
    public v2DirectCastConversationDetailsGet(requestParameters: DirectCastsApiV2DirectCastConversationDetailsGetRequest, options?: AxiosRequestConfig) {
        return DirectCastsApiFp(this.configuration).v2DirectCastConversationDetailsGet(requestParameters.conversationId, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DirectCastsApiV2DirectCastConversationGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectCastsApi
     */
    public v2DirectCastConversationGet(requestParameters: DirectCastsApiV2DirectCastConversationGetRequest, options?: AxiosRequestConfig) {
        return DirectCastsApiFp(this.configuration).v2DirectCastConversationGet(requestParameters.conversationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectCastsApi
     */
    public v2DirectCastConversationListGet(options?: AxiosRequestConfig) {
        return DirectCastsApiFp(this.configuration).v2DirectCastConversationListGet(options).then((request) => request(this.axios, this.basePath));
    }
}
